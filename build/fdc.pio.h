// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// fdc //
// --- //

#define fdc_wrap_target 0
#define fdc_wrap 30

static const uint16_t fdc_program_instructions[] = {
            //     .wrap_target
    0xe000, //  0: set    pins, 0                    
    0xe05f, //  1: set    y, 31                      
    0x4005, //  2: in     pins, 5                    
    0x407b, //  3: in     null, 27                   
    0xa026, //  4: mov    x, isr                     
    0x00a2, //  5: jmp    x != y, 2                  
    0x80a0, //  6: pull   block                      
    0x7891, //  7: out    pindirs, 17     side 1     
    0x4005, //  8: in     pins, 5                    
    0x407b, //  9: in     null, 27                   
    0xa026, // 10: mov    x, isr                     
    0x00ad, // 11: jmp    x != y, 13                 
    0x0008, // 12: jmp    8                          
    0x4005, // 13: in     pins, 5                    
    0x407b, // 14: in     null, 27                   
    0xa026, // 15: mov    x, isr                     
    0x00b2, // 16: jmp    x != y, 18                 
    0x0008, // 17: jmp    8                          
    0xe001, // 18: set    pins, 1                    
    0xe04f, // 19: set    y, 15                      
    0x00b7, // 20: jmp    x != y, 23                 
    0xb042, // 21: nop                    side 0     
    0x001c, // 22: jmp    28                         
    0xe05d, // 23: set    y, 29                      
    0x00bb, // 24: jmp    x != y, 27                 
    0xb042, // 25: nop                    side 0     
    0x001c, // 26: jmp    28                         
    0xb842, // 27: nop                    side 1     
    0xe001, // 28: set    pins, 1                    
    0xc020, // 29: irq    wait 0                     
    0x001e, // 30: jmp    30                         
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program fdc_program = {
    .instructions = fdc_program_instructions,
    .length = 31,
    .origin = -1,
};

static inline pio_sm_config fdc_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + fdc_wrap_target, offset + fdc_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

void fdc_program_init(PIO pio, uint sm, uint offset, uint wait_pin, uint drvsel_pin, uint dir_pin, pio_sm_config* pc) {
    *pc = fdc_program_get_default_config(offset);
    sm_config_set_in_pins(pc, drvsel_pin);          // first pin associated with the in instruction
    sm_config_set_out_pins(pc, wait_pin, 1);        // first pin associated with the out instruction
    sm_config_set_set_pins(pc, wait_pin, 1);        // first pin associated with the set instruction
    sm_config_set_sideset_pins(pc, dir_pin);        // first pin associated with the side option
    pio_sm_set_consecutive_pindirs(pio, sm, drvsel_pin, 5, false);  // specify the first and number of input pins
    pio_sm_set_consecutive_pindirs(pio, sm, wait_pin, 1, true);     // specify the first and number of output pins
    pio_gpio_init(pio, wait_pin);
    pio_gpio_init(pio, dir_pin);
    pio_gpio_init(pio, drvsel_pin);
    uint32_t both_pins = (1u << wait_pin) | (1u << dir_pin);
    pio_sm_set_pins_with_mask(pio, sm, both_pins, both_pins);
    pio_sm_set_pindirs_with_mask(pio, sm, both_pins, both_pins);
    pio_sm_init(pio, sm, offset, pc);
}

#endif

